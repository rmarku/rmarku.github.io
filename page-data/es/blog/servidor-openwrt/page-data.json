{"componentChunkName":"component---src-templates-blog-js","path":"/es/blog/servidor-openwrt","result":{"data":{"allMdx":{"edges":[{"node":{"frontmatter":{"title":"Servidor OpenWRT (obsoleto)","date":1384888980},"fields":{"lang":"es","slug":"/blog/servidor-openwrt"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Servidor OpenWRT (obsoleto)\",\n  \"date\": 1384888980,\n  \"description\": \"Configurar un router con la posibilidad de utilizar un pendrive como root externo\",\n  \"tags\": \"openwrt, linux, router\",\n  \"thumbnail\": \"./primero.png\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"En esta serie de post, voy a mostrar como poner a correr OpenWRT en un router, utilizaremos las opciones de EXTRoot para poder instalar mas paquetes en un Pendrive USB. Una vez echo eso, instalaremos mysql, php, lighttpd para poder servir nuestra web. Tambi\\xE9n pondr\\xE9 Transmission para hacer de seeder y compartir\\xE9 los archivos del pendrive/hhd USB por SAMBA y NFS. Esto es bastante parecido a lo que tengo implementado en casa.\"), mdx(\"p\", null, \"OpenWRT es una distribuci\\xF3n linux que se dedica a hacer correr este sistema operativo en routers de distintas marcas, creando firmwares que reemplazan el original y le dan, al peque\\xF1o aparato, toda la potencia de un sistema operativo completo.\\nConfiguraci\\xF3n Inicial\"), mdx(\"p\", null, \"Supondr\\xE9 que ya has flasheado el router siguiendo la gu\\xEDa especifica para tu modelo y que lo que hay que hacer es configurarlo.\"), mdx(\"p\", null, \"entramos al router por telnet para nuestro primer inicio.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"shell-session\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-shell-session\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell-session\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token sh important\"\n  }), \"$\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token bash language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"nc\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token number\"\n  }), \"192.168\"), \".1.1 \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token number\"\n  }), \"23\")))))), mdx(\"p\", null, \"luego, hacemos lo que nos recomienda, cambiar el password del usuario ROOT\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"shell-session\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-shell-session\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell-session\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"root@OpenWrt:/\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token sh important\"\n  }), \"$\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token bash language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"passwd\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"passwd\\nChanging password for root\\nNew password: xxxxx\\n\\nRetype password: xxxxx\\n\\nPassword for root changed by root\\nroot@OpenWrt:/\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token sh important\"\n  }), \"$\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token bash language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token builtin class-name\"\n  }), \"exit\")))))), mdx(\"p\", null, \"y luego de salir, podremos entrar y trabajar mas c\\xF3modamente por SSH. Aprovechamos para instalar unos cuantos paquetes que nos ayudaran a la hora de configurar el USB para que nuestro rootFS sea el USB\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"shell-session\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-shell-session\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell-session\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"martin@jarvis ~/ \"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token sh important\"\n  }), \"$\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token bash language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"ssh\"), \" root@192.168.1.1\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \" _______                     ________        __\\n|       |.-----.-----.-----.|  |  |  |.----.|  |_\\n|   -   ||  _  |  -__|     ||  |  |  ||   _||   _|\\n|_______||   __|_____|__|__||________||__|  |____|\\n          |__| W I R E L E S S   F R E E D O M\\n-----------------------------------------------------\\nBARRIER BREAKER (Bleeding Edge, r38843)\\n-----------------------------------------------------\\n  * 1/2 oz Galliano         Pour all ingredients into\\n  * 4 oz cold Coffee        an irish coffee mug filled\\n  * 1 1/2 oz Dark Rum       with crushed ice. Stir.\\n  * 2 tsp. Creme de Cacao\\n-----------------------------------------------------\\n\\nroot@OpenWrt:/\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token sh important\"\n  }), \"$\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token bash language-bash\"\n  }), \"opkg update\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"...\\nroot@OpenWrt:/\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token sh important\"\n  }), \"$\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token bash language-bash\"\n  }), \"opkg \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"install\"), \" block-mount kmod-usb-storage blkid\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"...\\nroot@OpenWrt:/\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token sh important\"\n  }), \"$\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token bash language-bash\"\n  }), \"opkg \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"install\"), \" kmod-usb-storage-extras kmod-fs-ext4 kmod-fs-vfat\"))))), mdx(\"p\", null, \"con esto tenemos los drivers para soporte de dispositivos USB como pendrives y discos\"), mdx(\"p\", null, \"continuamos con montar nuestro dispositivo, podemos ver como los detecto el kernel con los siguientes comandos\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"shell-session\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-shell-session\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell-session\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"root@OpenWrt:/\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token sh important\"\n  }), \"$\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token bash language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"dmesg\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"|\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"grep\"), \" -e sd.\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"..\\n[    8.640000]  sda: sda1 sda2\\n..\\n..\\n[   12.220000]  sdb: sdb1 sdb2\\n..\\n\")))), mdx(\"p\", null, \"Ac\\xE1 se puede ver que tengo 2 dispositivos, con dos particiones cada uno. En lo particular utilice un HDD USB y un pendrive de 8Gb. En el pendrive voy a tener el root del OpenWRT y en el disco, todos los archivos de las web, la base de datos, los torrent, y archivos que comparta como servidor de archivos.\"), mdx(\"p\", null, \"Es conveniente tambi\\xE9n agregar una partici\\xF3n SWAP en el HDD, no recomiendo hacerlo en el pendrive ya que se romper\\xEDa muy r\\xE1pido. La partici\\xF3n SWAP ayudara al router cuando este con poca memoria. En mi caso tiene 128Mb de ram, y Transmission sabe consumir entre 30Mb y 75Mb seg\\xFAn la cantidad de torrents que tenga cargados.\"), mdx(\"p\", null, \"Bueno, a lo nuestro. Ahora montamos nuestro dispositivo (previamente particionado en Ext4, 3 o 2)... si no se monta, hay que reiniciar para que cargue los m\\xF3dulos USB y detecte el pendrive.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"shell-session\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-shell-session\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell-session\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"root@OpenWrt:/\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token sh important\"\n  }), \"$\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token bash language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"mount\"), \" /dev/sdb1 /mnt/\"))))), mdx(\"p\", null, \"Ahora debemos generar el archivo con el que montar los discos. El archivo es /etc/config/fstab y debe contener cada partici\\xF3n, el punto de montaje, y algunas otras caracter\\xEDsticas. En lo personal recomiendo utilizar los uuid de las particiones y no la ruta en el sistema de archivos (/dev/sdxx), debido a que al ser dispositivos USB, estos saben cambiar la ruta seg\\xFAn cual le responde primero al kernel.\"), mdx(\"p\", null, \"Para obtener el uuid de una partici\\xF3n procedemos as\\xED:\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"shell-session\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-shell-session\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell-session\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"root@OpenWrt:/\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token sh important\"\n  }), \"$\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token bash language-bash\"\n  }), \"blkid /dev/sdb1\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"/dev/sdb1: LABEL=\\\"ROOT\\\" UUID=\\\"be28121f-5446-44a3-adfd-3143f2a5c0c4\\\" TYPE=\\\"ext4\\\"\")))), mdx(\"p\", null, \"A continuaci\\xF3n, debemos crear el archivo /etc/config/fstab. Ac\\xE1 hay un ejemplo del que yo utilizo. N\\xF3tese que la partici\\xF3n que voy a utilizar de ROOT (/dev/sdb1) tiene colocado el uuid y no hace referencia a SDB1.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"text\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-text\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-text\"\n  }), \"config 'global'\\n        option  anon_swap       '0'\\n        option  anon_mount      '0'\\n        option  auto_swap       '1'\\n        option  auto_mount      '1'\\n        option  delay_root      '5'\\n        option  check_fs        '0'\\n\\nconfig 'swap'\\n        option  uuid    'c0e1930a-dd0b-4029-ab4d-948b9a080469'\\n        option  enabled '1'\\n\\nconfig 'mount'\\n        option  target  '/home/martin'\\n        option  uuid    '5cdcfae4-a8ec-4be2-bb6d-ca114acb56d9'\\n        option  enabled '1'\\n\\nconfig 'mount'\\n        option  target  '/'\\n        option  uuid    'be28121f-5446-44a3-adfd-3143f2a5c0c4'\\n        option  enabled '1'\\n\\nconfig 'swap'\\n        option  uuid    '69a037bc-8257-4c9a-a26a-cf676ed50888'\\n        option  enabled '1'\\n\\nconfig 'mount'\\n        option  target   '/overlay-boot'\\n        option  device   '/dev/mtdblock3'\\n        option  fstype   'jffs2'\\n        option  options  'rw,sync'\\n        option  enabled  '1'\"))), mdx(\"p\", null, \"La ultima configuraci\\xF3n del archivo, el mount con target /overlay-boot, es para poder tener acceso al root que todav\\xEDa esta grabado en la flash, por si es necesario realizar alg\\xFAn cambio.\"), mdx(\"p\", null, \"Lo siguiente que necesitamos hacer es copiar toda la configuraci\\xF3n actual de la flash al pendrive, para que tengan exactamente los mismos archivos y en el lugar que corresponda. Para esto debemos remontar el root en una carpeta, para luego poder obviarla con el comando tar. Mi primera linea lo que hace es crear el directorio HOME, ya que no viene por defecto y lo usaremos luego.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"shell-session\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-shell-session\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell-session\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"root@OpenWrt:/\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token sh important\"\n  }), \"$\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token bash language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"mkdir\"), \" /home\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"root@OpenWrt:/\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token sh important\"\n  }), \"$\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token bash language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"mkdir\"), \" /tmp/cproot\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"root@OpenWrt:/\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token sh important\"\n  }), \"$\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token bash language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"mount\"), \" --bind / /tmp/cproot\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"root@OpenWrt:/\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token sh important\"\n  }), \"$\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token bash language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"tar\"), \" -C /tmp/cproot -cvf - \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token builtin class-name\"\n  }), \".\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token operator\"\n  }), \"|\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"tar\"), \" -C /mnt -xvf -\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"...\\nroot@OpenWrt:/\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token sh important\"\n  }), \"$\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token bash language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"sync\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token punctuation\"\n  }), \";\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"umount\"), \" /mnt\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"root@OpenWrt:/\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token sh important\"\n  }), \"$\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token bash language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"umount\"), \" /tmp/cproot\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"root@OpenWrt:/\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token sh important\"\n  }), \"$\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token bash language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"reboot\")))))), mdx(\"p\", null, \"Ahora, una vez reiniciado, con df -h podemos ver si realmente esta todo en orden, el rootfs debe mostrar en disponible, el tama\\xF1o de nuestro pendrive.\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"shell-session\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-shell-session\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell-session\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"root@OpenWrt:/\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token sh important\"\n  }), \"$\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token bash language-bash\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"df\"), \" -h\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"Filesystem                Size      Used Available Use% Mounted on\\nrootfs                    6.5G     26.0M      6.1G   0% /\\n/dev/root                 2.0M      2.0M         0 100% /rom\\ntmpfs                    61.7M    552.0K     61.2M   1% /tmp\\n/dev/sdb1                 6.5G     26.0M      6.1G   0% /\\ntmpfs                   512.0K         0    512.0K   0% /dev\")))), mdx(\"p\", null, \"Herramientas de Router\"), mdx(\"p\", null, \"Lo siguiente es instalar herramientas necesarias para poder trabajar c\\xF3modos con nuestro router. OpenWRT utiliza un sistema web llamado Luci, as\\xED que lo instalaremos para poder realizar las configuraciones a trav\\xE9s de nuestro navegador\"), mdx(\"div\", {\n    \"className\": \"gatsby-highlight\",\n    \"data-language\": \"shell-session\"\n  }, mdx(\"pre\", _extends({\n    parentName: \"div\"\n  }, {\n    \"className\": \"language-shell-session\"\n  }), mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell-session\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"root@OpenWrt:/\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token sh important\"\n  }), \"$\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token bash language-bash\"\n  }), \"opkg update\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"root@OpenWrt:/\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token sh important\"\n  }), \"$\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token bash language-bash\"\n  }), \"opkg \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"install\"), \" luci shadow-useradd \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token function\"\n  }), \"mc\"))), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"root@OpenWrt:/\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token sh important\"\n  }), \"$\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token bash language-bash\"\n  }), \"/etc/init.d/uhttpd start\")), \"\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token output\"\n  }), \"root@OpenWrt:/\"), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"token command\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token sh important\"\n  }), \"$\"), \" \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token bash language-bash\"\n  }), \"/etc/init.d/uhttpd \", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"token builtin class-name\"\n  }), \"enable\")))))), mdx(\"p\", null, \"Listo, ahora podemos entrar a nuestro router con la url \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://192.168.1.1/\"\n  }), \"http://192.168.1.1/\")), mdx(\"p\", null, \"Si encuentras alg\\xFAn error, si piensas que algo se puede mejorar o simplemente te sirvi\\xF3 por favor deja tu comentario. Gracias.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}}]}},"pageContext":{"slug":"/blog/servidor-openwrt","language":"es","intl":{"language":"es","languages":["en","es"],"messages":{"en":"Inglés","es":"Español","Blog":"Blog","Courses":"Cursos","About":"Sobre mi","CV":"CV","Uses":"Que uso","career_summary":"Trayectoria profesional","work_exp":"Experiencia Laboral","details":"Detalles:","used_tech":"Tecnologías utilizadas: ","education":"Educación","teaching":"Enseñanza","journals":"Publicaciones","skills":"Habilidades","languages":"Idiomas","interests":"Intereses","en_fluency":"Oral y escrito avanzado","es_fluency":"Nativo","Programing":"Programación","Technologies/Tools":"Tecnologias/Herramientas","Data Bases":"Base de Datos","Operating Systems":"Sistemas Operativos","Others":"Otros","años":"años"},"routed":true,"originalPath":"/blog/servidor-openwrt","redirect":false,"defaultLanguage":"es"}}}}